#!/usr/bin/env rust-script
//!
//!
//! ```cargo
//! [dependencies]
//!
//! ```

//use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader};

fn main() -> std::io::Result<()> {
  let input_file = std::env::args().nth(1).expect("Input file not specified");
  let file = File::open(input_file)?;
  let reader = BufReader::new(file);

  let mut bingo_boards = Vec::new();
  let mut bingo_board = Vec::new();
  let mut count = 0;
  let count_max = 5;

  //// PARSING
  for (_index, line) in reader.lines().enumerate() {
    let line = line.unwrap();

    // Skip empty lines
    if line == "" { continue; }

    // Parse a bingo board
    bingo_board.push( line.split_whitespace().map(|str|str.parse::<i32>().unwrap()) );
    count += 1;
    if count >= count_max {
      bingo_boards.push( bingo_board.clone() );
      bingo_board.clear();
      count = 0;
    }
  }

  //// CHECK

  //// CALCULATION

  //// ANSWER
  let answer = 0;
  println!("{}", answer);

  return Ok(());
}


//PARSING
//  läs in rad 1
//    splitta på ','
//    spara ner i en Vec: bingo_numbers
//
//  skapa en Vec: bingo_boards
//
//  loop
//    skippa 1 tom rad
//    skapa en Vec: bingo_board
//    läs 5 rader
//      splitta på whitespace till en vec, push:a till bingo_board
//    push:a bingo_board till bingo_boards
//
//CHECK
//  kontrollera hur man accessar ett värde
//    förhoppningsvis med bingo_boards[i][x][y]
//
//
//CALCULATION
//  skapa en funktion: check_if_bingo()
//    som kontrollerar om en board har fått bingo
//    bingo: fem 0 i rad, horisontellt eller vertikalt
//
//  loop: bingo_number in bingo_numbers
//    hitta alla bingo_number i bingo_boards
//      skriv över dom med 0
//    hitta alla bingo_board som fått 5st 0 i rad
//      (horisontellt eller vertikalt)
//      summera alla värden, multiplicera med bingo_number, spara i final_score
//      let boards_got_bingo
//        spara bingo_id
//        spara final_score


//char:is_whitespace
