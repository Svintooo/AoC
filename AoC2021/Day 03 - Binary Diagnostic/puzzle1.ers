#!/usr/bin/env rust-script
//!
//!
//! ```cargo
//! [dependencies]
//!
//! ```

//use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader};

fn main() {
  let input_file = std::env::args().nth(1).expect("Input file not specified");
  let file = File::open(input_file).unwrap();
  let reader = BufReader::new(file);

  let mut one_count = Vec::new();
  let mut row_count = 0;

  for (_index, line) in reader.lines().enumerate() {
    row_count += 1;

    let line = line.unwrap();
    let bits = line.chars();

    // I feel this should be possible to do without the `clone()`.
    // Can I not use a borrow here somehow?
    let number_of_bits = bits.clone().count();

    if one_count.len() < number_of_bits {
      one_count.resize(number_of_bits, 0);
    }

    for (index, bit) in bits.enumerate() {
      if bit == '1' { one_count[index] += 1; }
    }
  }

  let mut gamma_bin   = String::new();
  let mut epsilon_bin = String::new();

  for (index, _) in one_count.iter().enumerate() {
    let zero_count = row_count - one_count[index];

    if one_count[index] > zero_count {
      gamma_bin  .push('1');
      epsilon_bin.push('0');
    } else if one_count[index] < zero_count {
      gamma_bin  .push('0');
      epsilon_bin.push('1');
    } else {
      panic!("ERROR");
    }
  }

  let gamma   = isize::from_str_radix(&gamma_bin,   2).unwrap();
  let epsilon = isize::from_str_radix(&epsilon_bin, 2).unwrap();

  let answer = gamma * epsilon;
  println!("{}", answer);
}
